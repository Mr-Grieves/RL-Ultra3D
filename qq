[1mdiff --git a/gym_ultra3d/envs/ultra3d2a1d_env.py b/gym_ultra3d/envs/ultra3d2a1d_env.py[m
[1mindex f0a1b90..9f8a0e2 100644[m
[1m--- a/gym_ultra3d/envs/ultra3d2a1d_env.py[m
[1m+++ b/gym_ultra3d/envs/ultra3d2a1d_env.py[m
[36m@@ -16,14 +16,17 @@[m [mPHI_MAX = 30[m
 ALPHA_MAX = 0.1[m
 NETSIZE = 128[m
 [m
[31m-HIGH_REWARD_THRESH = 1.37[m
[31m-LOW_REWARD_THRESH = -0.41[m
[32m+[m[32mHIGH_REWARD_THRESH = 1.36[m
[32m+[m[32mLOW_REWARD_THRESH = -0.44[m
 [m
 NUM_STEPS_MAX = 100[m
 TARGET_THETA = 0.02[m
 TARGET_PHI = 0.02[m
 TARGET_D = -0.01[m
 [m
[32m+[m[32mWARMUP_INTERC = 0.2[m
[32m+[m[32mWARMUP_PORTION = 0.1[m
[32m+[m
 class Ultra3DEnv2A1D(gym.Env):[m
     metadata = {'render.modes': ['human']}[m
 [m
[36m@@ -79,7 +82,7 @@[m [mclass Ultra3DEnv2A1D(gym.Env):[m
         TrueAP4 = self.get_slice(TARGET_THETA, TARGET_PHI, TARGET_D)[m
         self.TrueAP4_masked = self.mean_mask(TrueAP4)[m
         self.maxreward = self.correlate(TrueAP4)[m
[31m-        self.display_slice(TrueAP4)[m
[32m+[m[32m        #self.display_slice(TrueAP4)[m
 [m
         # Define what the agent can do[m
         self.action_space = spaces.Discrete(len(self.ACTION_LOOKUP))[m
[36m@@ -93,8 +96,10 @@[m [mclass Ultra3DEnv2A1D(gym.Env):[m
         self.num_steps = 0[m
 [m
         # Store what the agent tried[m
[31m-        self.curr_episode = -1[m
         self.outcomes = np.zeros((4,1))[m
[32m+[m[32m        self.total_num_steps = 0[m
[32m+[m[32m        self.max_num_steps = -1[m
[32m+[m[32m        #self.curr_episode = -1[m
         #self.action_episode_memory = [][m
 [m
     def step(self, action):[m
[36m@@ -193,19 +198,25 @@[m [mclass Ultra3DEnv2A1D(gym.Env):[m
         return np.array(spm.imresize(self.curr_slice,(NETSIZE,NETSIZE)),dtype='float') / 255.0[m
 [m
     def reset(self):[m
[31m-        self.curr_episode += 1[m
[31m-        #self.action_episode_memory.append([])[m
[32m+[m[32m        assert(self.max_num_steps != -1)[m
[32m+[m[32m        self.total_num_steps += self.num_steps[m
[32m+[m
[32m+[m[32m        # Pseudo-random init of state[m
[32m+[m[32m        rand_range = min(1.0, WARMUP_INTERC+(self.total_num_steps/self.max_num_steps*(1-WARMUP_INTERC)/WARMUP_PORTION))[m
[32m+[m[32m        #print("Episode =",self.total_num_steps," ->  max =",rand_range)[m
[32m+[m[32m        self.curr_th = random.uniform(-rand_range, rand_range)[m
[32m+[m[32m        self.curr_ph = random.uniform(-rand_range, rand_range)[m
[32m+[m[32m        self.curr_d  = random.uniform(-rand_range, rand_range)[m
 [m
[31m-        # Random init of state[m
[31m-        self.curr_th = random.uniform(-1,1)[m
[31m-        self.curr_ph = random.uniform(-1,1)[m
[31m-        self.curr_d  = random.uniform(-1,1)[m
         self.alpha = ALPHA_MAX[m
         self.curr_slice = self.get_slice(self.curr_th, self.curr_ph, self.curr_d)[m
         self.num_steps = 0[m
         self.oob = False[m
         return self._get_state()[m
 [m
[32m+[m[32m    def set_maximum_steps(self, nb):[m
[32m+[m[32m        self.max_num_steps = nb[m
[32m+[m
     def force_reset(self,theta,phi,dist):[m
         # Random init of state[m
         self.curr_th = theta[m
[36m@@ -309,21 +320,21 @@[m [mclass Ultra3DEnv2A1D(gym.Env):[m
         theta = theta_n*math.pi[m
         phi = math.radians(phi_n*PHI_MAX)[m
 [m
[31m-        b1 = [max(-1., min(1., math.sin(theta) - math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta))),[m
[31m-              max(-1., min(1., -math.cos(theta) - math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta))),[m
[31m-              max(-1., min(1., -math.cos(phi)))][m
[32m+[m[32m        b1 = [math.sin(theta) - math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta),[m
[32m+[m[32m              -math.cos(theta) - math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta),[m
[32m+[m[32m              -math.cos(phi)][m
 [m
[31m-        b2 = [max(-1., min(1., -math.sin(theta) - math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta))),[m
[31m-              max(-1., min(1., math.cos(theta) - math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta))),[m
[31m-              max(-1., min(1., -math.cos(phi)))][m
[32m+[m[32m        b2 = [-math.sin(theta) - math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta),[m
[32m+[m[32m              math.cos(theta) - math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta),[m
[32m+[m[32m              -math.cos(phi)][m
 [m
[31m-        b3 = [max(-1., min(1., math.sin(theta) + math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta))),[m
[31m-              max(-1., min(1., -math.cos(theta) + math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta))),[m
[31m-              max(-1., min(1., math.cos(phi)))][m
[32m+[m[32m        b3 = [math.sin(theta) + math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta),[m
[32m+[m[32m              -math.cos(theta) + math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta),[m
[32m+[m[32m              math.cos(phi)][m
 [m
[31m-        b4 = [max(-1., min(1., -math.sin(theta) + math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta))),[m
[31m-              max(-1., min(1., math.cos(theta) + math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta))),[m
[31m-              max(-1., min(1., math.cos(phi)))][m
[32m+[m[32m        b4 = [-math.sin(theta) + math.sin(phi)*math.cos(theta) + dist_n*math.cos(theta),[m
[32m+[m[32m              math.cos(theta) + math.sin(phi)*math.sin(theta) + dist_n*math.sin(theta),[m
[32m+[m[32m              math.cos(phi)][m
 [m
         #print("theta =",math.degrees(theta),"\tphi =",math.degrees(phi),"\t\th1 =,",h1,"\th2 =",h2,"\tv1 =",v1,"\tv2 =",v2)[m
         return b1, b2, b3, b4[m
[36m@@ -332,8 +343,11 @@[m [mclass Ultra3DEnv2A1D(gym.Env):[m
         #print("rendering with d =",self.curr_th," and a =",self.curr_ph)[m
         if self.plot_opened == False:[m
             self.plot_opened = True[m
[31m-            self.fig = plt.figure()[m
[31m-            self.ax = self.fig.add_subplot(111, projection='3d')[m
[32m+[m[32m            self.fig = plt.figure(figsize=(6,10))[m
[32m+[m[32m            self.ax1 = self.fig.add_subplot(211, projection='3d')[m
[32m+[m[32m            self.ax1.invert_zaxis()[m
[32m+[m[32m            self.ax1.invert_yaxis()[m
[32m+[m[32m            self.ax2 = self.fig.add_subplot(212)[m
             plt.ion()[m
             plt.show()[m
 [m
[36m@@ -342,41 +356,46 @@[m [mclass Ultra3DEnv2A1D(gym.Env):[m
                         0 : 'k',[m
                         1 : 'g'}[m
         frame_colour = colour_map.get(self.success)[m
[31m-        self.ax.plot(xs=[-1, -1], ys=[-1, -1], zs=[-1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, -1], ys=[-1, 1], zs=[-1, -1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, 1], ys=[-1, -1], zs=[-1, -1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[1, 1], ys=[1, 1], zs=[-1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[1, 1], ys=[-1, 1], zs=[1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, 1], ys=[1, 1], zs=[1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, -1], ys=[1, 1], zs=[-1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, -1], ys=[-1, 1], zs=[1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, 1], ys=[-1, -1], zs=[1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[1, 1], ys=[-1, -1], zs=[-1, 1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[1, 1], ys=[-1, 1], zs=[-1, -1], color=frame_colour)[m
[31m-        self.ax.plot(xs=[-1, 1], ys=[1, 1], zs=[-1, -1], color=frame_colour)[m
[31m-        self.ax.set_xlabel('X')[m
[31m-        self.ax.set_ylabel('Y')[m
[31m-        self.ax.set_zlabel('Z')[m
[32m+[m[32m        self.ax1.plot(xs=[-1, -1], ys=[-1, -1], zs=[-1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, -1], ys=[-1, 1], zs=[-1, -1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, 1], ys=[-1, -1], zs=[-1, -1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[1, 1], ys=[1, 1], zs=[-1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[1, 1], ys=[-1, 1], zs=[1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, 1], ys=[1, 1], zs=[1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, -1], ys=[1, 1], zs=[-1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, -1], ys=[-1, 1], zs=[1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, 1], ys=[-1, -1], zs=[1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[1, 1], ys=[-1, -1], zs=[-1, 1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[1, 1], ys=[-1, 1], zs=[-1, -1], color=frame_colour)[m
[32m+[m[32m        self.ax1.plot(xs=[-1, 1], ys=[1, 1], zs=[-1, -1], color=frame_colour)[m
[32m+[m[32m        self.ax1.set_xlabel('X')[m
[32m+[m[32m        self.ax1.set_ylabel('Y')[m
[32m+[m[32m        self.ax1.set_zlabel('Z')[m
 [m
         # Plot target[m
         b1, b2, b3, b4 = self.get_bounding_box_full(TARGET_THETA, TARGET_PHI, TARGET_D)[m
         X = [[b1[0], b2[0]], [b3[0], b4[0]]][m
         Y = [[b1[1], b2[1]], [b3[1], b4[1]]][m
         Z = [[b1[2], b2[2]], [b3[2], b4[2]]][m
[31m-        self.ax.plot_surface(X, Y, Z, alpha=0.5)[m
[32m+[m[32m        self.ax1.plot_surface(X, Y, Z, alpha=0.5)[m
 [m
         # Plot surface[m
         b1, b2, b3, b4 = self.get_bounding_box_full(self.curr_th, self.curr_ph, self.curr_d)[m
         X = [[b1[0], b2[0]], [b3[0], b4[0]]][m
         Y = [[b1[1], b2[1]], [b3[1], b4[1]]][m
         Z = [[b1[2], b2[2]], [b3[2], b4[2]]][m
[31m-        self.ax.plot_surface(X, Y, Z, alpha=0.5)[m
[32m+[m[32m        self.ax1.plot_surface(X, Y, Z, alpha=0.5)[m
         if(self.success):[m
[31m-            self.ax.plot_surface(X, Y, Z, alpha=0.5, color=frame_colour)[m
[32m+[m[32m            self.ax1.plot_surface(X, Y, Z, alpha=0.5, color=frame_colour)[m
         else:[m
[31m-            self.ax.plot_surface(X, Y, Z, alpha=0.5)[m
[32m+[m[32m            self.ax1.plot_surface(X, Y, Z, alpha=0.5)[m
[32m+[m
[32m+[m[32m        # Display current slice[m
[32m+[m[32m        self.ax2.imshow(self.curr_slice,cmap="gray")[m
 [m
         plt.draw()[m
[31m-        plt.pause(0.0001)[m
[32m+[m[32m        plt.pause(0.00001)[m
         plt.cla()[m
[32m+[m[32m        self.ax1.clear()[m
[32m+[m[32m        self.ax2.clear()[m
         return[m
\ No newline at end of file[m
